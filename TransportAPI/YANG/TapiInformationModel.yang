module TapiInformationModel {


  namespace "urn:onf:tapi:im:yang";
  prefix Tapi;
  
  //import ietf-inet-types { prefix inet; }

  import TapiDataTypes { prefix TapiDt; }
  import TapiTopologyPacs { prefix TapiPacs; }

  organization "ONF T-API Group";

  contact "mailto:info@opennetworking.org";

  description
    "This module contains a collection of YANG definitions for
     Information Model. It is part of the T-API
     specification.
     Authors List:
     Ricard Vilalta (CTTC)
     Victor López (Telefónica)
     (T-API Team)";
   
  revision 2015-09-11 {
    description
      "First draft for Transport API Connectivity Service";
  }
 
  /*****************************************************************
  * Groupings
  *****************************************************************/
  grouping LayerProtocol {
    leaf layerProtocol {
      type string;
    }
  }
    
  grouping EndLtpRole {
    leaf endLtpRole {
      type string;
    }
  }
  
  grouping NodeEdgePoint {
    description
    "The LogicalTerminationPoint (LTP) object class encapsulates the 
    termination and adaptation functions of one or more transport layers. 
    The structure of LTP supports all transport protocols including circuit and packet forms.";
  
    leaf guid {
      type string;
    }  
    
    list ipList{
      key "layerProtocol";
      uses LayerProtocol;
    }
	
  }
    
  grouping Node {
    description
      "The ForwardingDomain (FD) object class models the ForwardingDomain topological component which is used to effect forwarding of transport characteristic information and offers the potential to enable forwarding. 
      At the lowest level of recursion, an FD (within a network element (NE)) represents a switch matrix (i.e., a fabric). Note that an NE can encompass multiple switch matrices (FDs). ";
    
    leaf guid {
      type string;
    }
      
    leaf-list _encapTopologyRef {
      type leafref {
        path "/Topology/guid";
      }
      max-elements "1";
    }

    list edgeLtpList { // Differs from UML
      key "guid";
      uses NodeEdgePoint;     
    }
    
    list layerProtocolNameList {
      key "layerProtocolName";
      leaf layerProtocolName {
        type TapiDt:LayerProtocolName;
      }
      min-elements "1";
    }
  }

  grouping Link {
    description
    "The Link object class models effective adjacency between two or more ForwardingDomains (FD).";
    
    leaf guid {
      type string;
    }
  
    leaf-list _nodeRefList{
      type leafref {
        path "/Topology/node/guid";
      }
    }
  
    leaf-list _endLtpRefList {
      type leafref {
        path "/Topology/node/edgeLtpList/guid";
      }
      min-elements "2";
    }
    
    list endLtpRoleList {
      key "endLtpRole";
      uses EndLtpRole;
      min-elements "2";
    }
  
    list layerProtocolNameList {
      key "layerProtocolName";
      leaf layerProtocolName {
        type TapiDt:LayerProtocolName;
      }
      min-elements "1";
    }
    
    leaf operationalState {
      type TapiDt:OperationalState;
    }
    
    leaf administrativeState {
      type TapiDt:AdministrativeState;    
    }
    
    container _riskParameter_Pac {
      presence "<condition for RiskParameter_Pac attributes>";
      uses TapiPacs:RiskParameter_Pac;
    }
    
    container _transferCost_Pac {
      presence "<condition for TransferCost_Pac attributes>";
      uses TapiPacs:TransferCost_Pac;
    }
    
    container _transferTiming_Pac {
      presence "<condition for TransferTiming_Pac attributes>";
      uses TapiPacs:TransferTiming_Pac;
    }
    
    container _transferCapacity_Pac {
      presence "<condition for TransferCapacity_Pac attributes>";
      uses TapiPacs:TransferCapacity_Pac;
    }
    
    container _transferIntegrity_Pac {
      presence "<condition for TransferIntegrity_Pac attributes>";
      uses TapiPacs:TransferIntegrity_Pac;
    }
    
    container _validation_Pac {
      presence "<condition for Validation_Pac attributes>";    
      uses TapiPacs:Validation_Pac;
    }
    
    container _layerTransition_Pac {
      presence "<condition for LayerProtocolTransition_Pac attributes>";
      uses TapiPacs:LayerProtocolTransition_Pac;
    }
  }
  
  grouping Topology {
    leaf guid {
      type string;
    }
    
    list node {
      key "guid";
      uses Node;
    }
    
    list link {
      key "guid";
      uses Link;
    }
    
    leaf layerProtocolName {
      type TapiDt:LayerProtocolName;
    }
  }
  
  grouping ServiceEndPoint {
    description
    "The LogicalTerminationPoint (LTP) object class encapsulates the 
    termination and adaptation functions of one or more transport layers. 
    The structure of LTP supports all transport protocols including circuit and packet forms.";
  
    leaf guid {
      type string;
    }  
    
    list _IpList{
    key "layerProtocol";
      uses LayerProtocol;
      min-elements "1";
    }

    list _clientLtpRefList {
      key "guid";
      uses ConnectionEndPoint;
    }
  }
  
  grouping ConnectionEndPoint {
    description
    "The LogicalTerminationPoint (LTP) object class encapsulates the termination and adaptation functions of one or more transport layers. 
    The structure of LTP supports all transport protocols including circuit and packet forms.";
  
    leaf guid {
      type string;
    }

    list _IpList{
    key "layerProtocol";
      uses LayerProtocol;
      min-elements "1";
    }
  }

  grouping Path {
    description
    "The FC Route (FcRoute) object class models the individual routes of an FC. 
    The route of an FC object is represented by a list of FCs at a lower level. 
    Note that depending on the service supported by an FC, an the FC can have multiple routes.";

    leaf guid {
      type string;
    }

    leaf-list _LowerLevelFcList{
      type leafref {
        path "/Connection/guid";
      }
      min-elements "1";
    }
  }
  
  grouping Connection {
    leaf guid {
      type string;
    }

    list pathList { // Differs from UML
      key "guid";
      uses Path;
    }

    list endLtpList { // Differs from UML
      key "guid";
      uses ConnectionEndPoint;
    }
  
    list endLtpRoleList {
      key "endLtpRole";
      uses EndLtpRole;
      min-elements "2";
    }
    
    leaf layerProtocolName {
      type TapiDt:LayerProtocolName;
    } 
    
  }
  
  grouping Service {
    leaf guid {
      type string;
    }

    leaf-list _connectionRefList {
      type leafref {
        path "/Connection/guid";
      }
    }
  
    list endLtpList { //Differs from UML
      key "guid";
      uses ServiceEndPoint;
      min-elements "2";
    }
  
    list endLtpRoleList {
      key "endLtpRole";
      uses EndLtpRole;
      min-elements "2";
    }
    
    leaf layerProtocolName {
      type TapiDt:LayerProtocolName;
    }
  }
  
  
  /*****************************************************************
  * Main containers
  *****************************************************************/
 
 
  list Topology {
    description
    "The ForwardingConstruct (FC) object class models enabled potential for forwarding between two or more LTPs and like the LTP supports any transport protocol including all circuit and packet forms. 
    At the lowest level of recursion, a FC represents a cross-connection within an NE.";
    
    key "guid";
    uses Topology;
  } 
  
    list Connection {
    description
    "The ForwardingConstruct (FC) object class models enabled potential for forwarding between two or more LTPs and like the LTP supports any transport protocol including all circuit and packet forms. 
    At the lowest level of recursion, a FC represents a cross-connection within an NE.";
  
    key "guid";
    uses Connection;
  } 
 
  list Service {
    description
    "The ForwardingConstruct (FC) object class models enabled potential for forwarding between two or more LTPs and like the LTP supports any       
    transport protocol including all circuit and packet forms. 
    At the lowest level of recursion, a FC represents a cross-connection within an NE.";
    
    key "guid";
    uses Service;
  }  
}
